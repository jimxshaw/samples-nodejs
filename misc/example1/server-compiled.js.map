{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,cAAc,QAAQ,aAAR,CAAd;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,MAAM,QAAQ,KAAR,CAAN;;AAEJ,IAAI,YAAY,aAAZ;;;AAGJ,IAAI,mBAAmB,eAAnB;;;;;AAKJ,IAAI,SAAS,KAAK,YAAL,CAAkB,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAE9C,QAAI,QAAQ,IAAI,KAAJ,CAAU,IAAI,GAAJ,EAAS,IAAnB,EAAyB,KAAzB,CAFkC;;AAI9C,QAAI,MAAM,IAAN,EAAY;AACZ,kBAAU,GAAV,EAAe,GAAf,EAAoB,KAApB,EADY;AAEZ,eAFY;KAAhB;;AAKA,eAAW,GAAX,EAAgB,GAAhB,EAT8C;CAAnB,CAA3B;;;;AAcJ,SAAS,UAAT,CAAoB,GAApB,EAAyB,GAAzB,EAA8B;;;AAG1B,QAAI,SAAJ,CAAc,GAAd,EAAmB,EAAC,gBAAgB,WAAhB,EAApB,EAH0B;;AAK1B,OAAG,OAAH,CAAW,SAAX,EAAsB,UAAS,GAAT,EAAc,KAAd,EAAqB;;AAEvC,YAAI,GAAJ,EAAS;AACL,gBAAI,GAAJ,CAAQ,GAAR,EADK;AAEL,mBAFK;SAAT;;;AAFuC,YAQnC,eAAe,EAAf,CARmC;AASvC,aAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;AACnC,gBAAI,OAAO,MAAM,CAAN,CAAP;;;;;AAD+B,wBAMnC,IAAgB,CAAC,mBAAD,GAAsB,IAAtB,EAA2B,EAA3B,GAA+B,IAA/B,EAAoC,SAApC,CAAhB,CANmC;SAAvC;;;;;AATuC,WAsBvC,CAAI,GAAJ,CAAQ,CAAC;;gBAAD,GAEE,YAFF,EAEe;;;;;;;QAFf,CAAR,EAtBuC;KAArB,CAAtB,CAL0B;CAA9B;;AAwCA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,KAA7B,EAAoC;;;AAGhC,QAAI,iBAAiB,IAAjB,CAAsB,MAAM,IAAN,CAA1B,EAAuC;AACnC,kBAAU,GAAV,EAAe,GAAf,EAAoB,kBAApB,EADmC;AAEnC,eAFmC;KAAvC;;;AAHgC,QAS5B,WAAW,KAAK,IAAL,CAAU,SAAV,EAAqB,MAAM,IAAN,CAAhC,CAT4B;;AAWhC,OAAG,QAAH,CAAY,QAAZ,EAAsB,UAAS,GAAT,EAAc,MAAd,EAAsB;AACxC,YAAI,GAAJ,EAAS;AACL,sBAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EADK;AAEL,mBAFK;SAAT;;;;AADwC,iBAQxC,CAAU,GAAV,EAAe,GAAf,EAAoB,OAAO,QAAP,EAApB,EARwC;KAAtB,CAAtB,CAXgC;CAApC;;;;AAyBA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC;AAClC,QAAI,SAAJ,CAAc,MAAd,EAAsB,EAAC,gBAAgB,YAAhB,EAAvB,EADkC;AAElC,QAAI,GAAJ,CAAQ,IAAR,EAFkC;CAAtC;;;AAMA,OAAO,MAAP,CAAc,IAAd,EAAoB,YAAW;AAC3B,YAAQ,GAAR,CAAY,2BAAZ,EAD2B;CAAX,CAApB","file":"server-compiled.js","sourcesContent":["var http = require(\"http\");\nvar querystring = require(\"querystring\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar url = require(\"url\");\n\nvar directory = \"./documents\";\n\n// Regular expression to securitize url paths.\nvar invalidFileRegex = /^[.\\/\\\\]|\\.\\./;\n\n// Create a simple http web server. It takes a callback that accepts\n// a request and returns a response. The server is a stream. To stop\n// it, we have to call .end method or it will continue to run indefinitely.\nvar server = http.createServer(function(req, res) {\n    // Parse out the request's url query string.\n    var query = url.parse(req.url, true).query;\n\n    if (query.file) {\n        writeFile(req, res, query);\n        return;\n    }\n\n    writeIndex(req, res);\n});\n\n// This is the function to write out the file contents from the documents\n// directory.\nfunction writeIndex(req, res) {\n    // It's important to tell the browser that we're going to pass in html\n    // so it'll render html. Http response status code of 200 means OK.\n    res.writeHead(200, {\"Content-Type\": \"text/html\"});\n\n    fs.readdir(directory, function(err, files) {\n        // If an error appears, end the server immediately and exit the function.\n        if (err) {\n            res.end(err);\n            return;\n        }\n\n        // Declare a variable that will be used in our template string later.\n        var fileListHtml = \"\";\n        for (var i = 0; i < files.length; i++) {\n            var file = files[i];\n\n            // The ?file is the query string that specifies a particular file.\n            // When an a tag has a ?= that means when it's clicked, it'll replace\n            // whatever query string that's there with that query string.\n            fileListHtml += `<li><a href=\"?file=${file}\">${file}</a></li>`;\n        }\n\n\n        // Template strings use backticks, the symbol next to 1 key. Keep in mind\n        // that backticks allow for multi-line template strings and javascript\n        // // expressions, signified by ${}.\n        res.end(`\n            <ul>\n                ${fileListHtml}\n            </ul>\n            <form method=\"POST\">\n                <input type=\"text\" name=\"file\"/>\n                <textarea name=\"text\"></textarea>\n                <input type=\"submit\" />\n            </form>\n        `);\n    });\n}\n\nfunction writeFile(req, res, query) {\n    // If users try to input a malicious url query string, send back a particular\n    // response.\n    if (invalidFileRegex.test(query.file)) {\n        writeText(res, 400, \"Invalid filename\");\n        return;\n    }\n\n    // Create the full filename.\n    var filename = path.join(directory, query.file);\n\n    fs.readFile(filename, function(err, buffer) {\n        if (err) {\n            writeText(res, 400, err);\n            return;\n        }\n\n        // If no error, write out with a status of 200, OK and get the contents\n        // of the file out with buffer.\n        writeText(res, 200, buffer.toString());\n    });\n}\n\n// This is used in case of errors. It will write out a head of a specified http\n// status code of content-type plain text and then write out some text.\nfunction writeText(res, status, text) {\n    res.writeHead(status, {\"Content-Type\": \"text/plain\"});\n    res.end(text);\n}\n\n// List the port where the web server will listen to requests.\nserver.listen(8000, function() {\n    console.log(\"Listening on port 8000...\");\n});"]}